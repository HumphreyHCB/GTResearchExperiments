--- Execution profile ---
Total samples       : 4145
unknown_Java        : 31 (0.75%)
not_walkable_Java   : 3 (0.07%)

--- 3639978626 ns (8.78%), 364 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 3240048778 ns (7.82%), 324 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 2940120818 ns (7.09%), 294 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1420042965 ns (3.43%), 142 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1349993693 ns (3.26%), 135 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1259996308 ns (3.04%), 126 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1109946511 ns (2.68%), 111 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1079994558 ns (2.61%), 108 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1019979493 ns (2.46%), 102 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 950033164 ns (2.29%), 95 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 910021953 ns (2.20%), 91 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 880074666 ns (2.12%), 88 samples
  [ 0] richards.TaskControlBlock.getIdentity
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 840040142 ns (2.03%), 84 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 790084641 ns (1.91%), 79 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 769977641 ns (1.86%), 77 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 710015707 ns (1.71%), 71 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 709988803 ns (1.71%), 71 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 579964869 ns (1.40%), 58 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 539982227 ns (1.30%), 54 samples
  [ 0] richards.DeviceTaskDataRecord.setPending
  [ 1] richards.Scheduler$DeviceProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 519976446 ns (1.25%), 52 samples
  [ 0] richards.TaskState.isWaitingWithPacket
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 490014481 ns (1.18%), 49 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 489989044 ns (1.18%), 49 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 469979446 ns (1.13%), 47 samples
  [ 0] richards.TaskControlBlock.getLink
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 370019167 ns (0.89%), 37 samples
  [ 0] richards.HandlerTaskDataRecord.deviceIn
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 360032306 ns (0.87%), 36 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 359998291 ns (0.87%), 36 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 340026950 ns (0.82%), 34 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 330001266 ns (0.80%), 33 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 319987122 ns (0.77%), 32 samples
  [ 0] richards.Scheduler.holdSelf
  [ 1] richards.Scheduler$DeviceProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 310014531 ns (0.75%), 31 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 300002238 ns (0.72%), 30 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 299987227 ns (0.72%), 30 samples
  [ 0] richards.TaskState.isWaitingWithPacket
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 280018319 ns (0.68%), 28 samples
  [ 0] richards.IdleTaskDataRecord.setControl
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 280012343 ns (0.68%), 28 samples
  [ 0] richards.IdleTaskDataRecord.setControl
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 270018243 ns (0.65%), 27 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler$IdleProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 269986571 ns (0.65%), 27 samples
  [ 0] richards.HandlerTaskDataRecord.deviceInAdd
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 240006849 ns (0.58%), 24 samples
  [ 0] richards.Packet.getIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 239981736 ns (0.58%), 24 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.TaskControlBlock.addInputAndCheckPriority
  [ 3] richards.Scheduler.queuePacket
  [ 4] richards.Scheduler$HandlerProcessFunction.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 239974754 ns (0.58%), 24 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 220013963 ns (0.53%), 22 samples
  [ 0] richards.Packet.getDatum
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 200015978 ns (0.48%), 20 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 200010177 ns (0.48%), 20 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 189999561 ns (0.46%), 19 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 189999339 ns (0.46%), 19 samples
  [ 0] richards.IdleTaskDataRecord.setControl
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 189994797 ns (0.46%), 19 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 180021492 ns (0.43%), 18 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 180016468 ns (0.43%), 18 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 180013068 ns (0.43%), 18 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.deviceInAdd
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 179999286 ns (0.43%), 18 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 179999084 ns (0.43%), 18 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 179996938 ns (0.43%), 18 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 179983085 ns (0.43%), 18 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 170003157 ns (0.41%), 17 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 169997656 ns (0.41%), 17 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 169997645 ns (0.41%), 17 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 169993461 ns (0.41%), 17 samples
  [ 0] richards.RBObject.append
  [ 1] richards.TaskControlBlock.addInputAndCheckPriority
  [ 2] richards.Scheduler.queuePacket
  [ 3] richards.Scheduler$HandlerProcessFunction.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 160043368 ns (0.39%), 16 samples
  [ 0] richards.IdleTaskDataRecord.setCount
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 159998613 ns (0.39%), 16 samples
  [ 0] richards.TaskState.running
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 150016700 ns (0.36%), 15 samples
  [ 0] richards.HandlerTaskDataRecord.deviceIn
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 150015113 ns (0.36%), 15 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 149999335 ns (0.36%), 15 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 149959502 ns (0.36%), 15 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.HandlerTaskDataRecord.workInAdd
  [ 3] richards.Scheduler$HandlerProcessFunction.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 140026577 ns (0.34%), 14 samples
  [ 0] richards.RBObject.append
  [ 1] richards.TaskControlBlock.addInputAndCheckPriority
  [ 2] richards.Scheduler.queuePacket
  [ 3] richards.Scheduler$HandlerProcessFunction.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 140008672 ns (0.34%), 14 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 140004086 ns (0.34%), 14 samples
  [ 0] richards.TaskState.setPacketPending
  [ 1] richards.TaskControlBlock.addInputAndCheckPriority
  [ 2] richards.Scheduler.queuePacket
  [ 3] richards.Scheduler$DeviceProcessFunction.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 139995371 ns (0.34%), 14 samples
  [ 0] richards.HandlerTaskDataRecord.workInAdd
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 130034499 ns (0.31%), 13 samples
  [ 0] richards.Packet.getIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 130014851 ns (0.31%), 13 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.holdSelf
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 130005826 ns (0.31%), 13 samples
  [ 0] richards.TaskState.isWaitingWithPacket
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 129993176 ns (0.31%), 13 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 120006054 ns (0.29%), 12 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler$IdleProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 119992879 ns (0.29%), 12 samples
  [ 0] richards.WorkerTaskDataRecord.setCount
  [ 1] richards.Scheduler$WorkerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 119978499 ns (0.29%), 12 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler$IdleProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 110012973 ns (0.27%), 11 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] [unknown_Java]

--- 110007258 ns (0.27%), 11 samples
  [ 0] richards.Packet.getLink
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 110006054 ns (0.27%), 11 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 110005698 ns (0.27%), 11 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 110003876 ns (0.27%), 11 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 110002160 ns (0.27%), 11 samples
  [ 0] richards.IdleTaskDataRecord.getControl
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 109989923 ns (0.27%), 11 samples
  [ 0] richards.Packet.setIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 100018555 ns (0.24%), 10 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 100011591 ns (0.24%), 10 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 100011147 ns (0.24%), 10 samples
  [ 0] richards.DeviceTaskDataRecord.setPending
  [ 1] richards.Scheduler$DeviceProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 100006907 ns (0.24%), 10 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 100001833 ns (0.24%), 10 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] [unknown_Java]

--- 99998168 ns (0.24%), 10 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 99985112 ns (0.24%), 10 samples
  [ 0] richards.Packet.setDatum
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 90009062 ns (0.22%), 9 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler$IdleProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 89993176 ns (0.22%), 9 samples
  [ 0] richards.DeviceTaskDataRecord.setPending
  [ 1] richards.Scheduler$DeviceProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 89979979 ns (0.22%), 9 samples
  [ 0] richards.HandlerTaskDataRecord.workIn
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 80003478 ns (0.19%), 8 samples
  [ 0] richards.Scheduler.release
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 80001858 ns (0.19%), 8 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$WorkerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 80000962 ns (0.19%), 8 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 70011276 ns (0.17%), 7 samples
  [ 0] richards.Packet.setIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 69995331 ns (0.17%), 7 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 69991487 ns (0.17%), 7 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler$WorkerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 69986502 ns (0.17%), 7 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] [unknown_Java]

--- 60005617 ns (0.14%), 6 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 60004714 ns (0.14%), 6 samples
  [ 0] richards.TaskState.packetPending
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 60003536 ns (0.14%), 6 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.workInAdd
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
  8230087989   19.86%      823  richards.Scheduler.schedule
  7630132641   18.41%      763  richards.TaskControlBlock.runTask
  4189961948   10.11%      419  richards.Scheduler$HandlerProcessFunction.apply
  3349996910    8.08%      335  richards.TaskState.isTaskHoldingOrWaiting
  2640116698    6.37%      264  richards.Scheduler$DeviceProcessFunction.apply
  1630021595    3.93%      163  richards.TaskControlBlock.addInputAndCheckPriority
  1490043306    3.59%      149  richards.Scheduler$IdleProcessFunction.apply
  1049976664    2.53%      105  richards.Scheduler.findTask
   949969499    2.29%       95  richards.TaskState.isWaitingWithPacket
   940017653    2.27%       94  richards.Scheduler$WorkerProcessFunction.apply
   880074666    2.12%       88  richards.TaskControlBlock.getIdentity
   839938633    2.03%       84  richards.Packet.setLink
   750030001    1.81%       75  richards.IdleTaskDataRecord.setControl
   729986550    1.76%       73  richards.DeviceTaskDataRecord.setPending
   570036383    1.38%       57  richards.RBObject.append
   529989401    1.28%       53  richards.Scheduler.queuePacket
   520035867    1.25%       52  richards.HandlerTaskDataRecord.deviceIn
   509988289    1.23%       51  richards.TaskControlBlock.getLink
   490042156    1.18%       49  richards.TaskState.setTaskHolding
   370041348    0.89%       37  richards.Packet.getIdentity
   330036912    0.80%       33  /home/hb478/repos/graal-instrumentation/sdk/mxbuild/linux-amd64/GRAALVM_LIBGRAAL_JAVA21/graalvm-libgraal-openjdk-21.0.2+13.1/lib/libjvmcicompiler.so
   319987122    0.77%       32  richards.Scheduler.holdSelf
   269986571    0.65%       27  richards.HandlerTaskDataRecord.deviceInAdd
   220013963    0.53%       22  richards.Packet.getDatum
   210002082    0.51%       21  richards.Packet.setIdentity
   180018266    0.43%       18  richards.TaskState.setPacketPending
   179988101    0.43%       18  richards.HandlerTaskDataRecord.workInAdd
   160043368    0.39%       16  richards.IdleTaskDataRecord.setCount
   159998613    0.39%       16  richards.TaskState.running
   150006929    0.36%       15  richards.Packet.getLink
   139983566    0.34%       14  richards.Packet.setDatum
   139978684    0.34%       14  richards.HandlerTaskDataRecord.workIn
   120000349    0.29%       12  richards.Scheduler.release
   119992879    0.29%       12  richards.WorkerTaskDataRecord.setCount
   110002160    0.27%       11  richards.IdleTaskDataRecord.getControl
    60004714    0.14%        6  richards.TaskState.packetPending
    49997573    0.12%        5  richards.WorkerTaskDataRecord.setDestination
    40002407    0.10%        4  richards.WorkerTaskDataRecord.getCount
    40001831    0.10%        4  richards.Packet.getData
    29981278    0.07%        3  Interpreter
    10028641    0.02%        1  java.lang.invoke.InvokerBytecodeGenerator.emitPushArguments
    10016212    0.02%        1  __kmem_cache_alloc_node_[k]
    10016122    0.02%        1  java_lang_invoke_MemberName::vmtarget
    10011190    0.02%        1  Run.measure
    10009008    0.02%        1  jdk.internal.org.objectweb.asm.MethodWriter.visitVarInsn
    10006551    0.02%        1  _raw_spin_unlock_irqrestore_[k]
    10006110    0.02%        1  next_uptodate_page_[k]
    10003607    0.02%        1  futex_wait_setup_[k]
    10003489    0.02%        1  free_unref_page_prepare_[k]
    10003232    0.02%        1  do_user_addr_fault_[k]
    10002329    0.02%        1  InstanceKlass::find_local_field_from_offset
    10001754    0.02%        1  _IO_default_xsputn
    10000288    0.02%        1  JVMCIRuntime::new_array_or_null
