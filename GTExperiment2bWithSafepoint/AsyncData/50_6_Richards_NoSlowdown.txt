--- Execution profile ---
Total samples       : 4129
unknown_Java        : 41 (0.99%)
not_walkable_Java   : 1 (0.02%)

--- 3440055956 ns (8.33%), 344 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 3190052292 ns (7.73%), 319 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 2520030705 ns (6.10%), 252 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1630068681 ns (3.95%), 163 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1520007470 ns (3.68%), 152 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 1390020044 ns (3.37%), 139 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 1050035808 ns (2.54%), 105 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1029989329 ns (2.49%), 103 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 1009999641 ns (2.45%), 101 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 970011699 ns (2.35%), 97 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 849995303 ns (2.06%), 85 samples
  [ 0] richards.TaskControlBlock.getIdentity
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 840013317 ns (2.03%), 84 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 820009312 ns (1.99%), 82 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 780030833 ns (1.89%), 78 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 779990373 ns (1.89%), 78 samples
  [ 0] richards.TaskState.isWaitingWithPacket
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 720019189 ns (1.74%), 72 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 710023550 ns (1.72%), 71 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 710012609 ns (1.72%), 71 samples
  [ 0] richards.TaskControlBlock.getLink
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 599986640 ns (1.45%), 60 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 569983771 ns (1.38%), 57 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 540010639 ns (1.31%), 54 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 420006035 ns (1.02%), 42 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 410010262 ns (0.99%), 41 samples
  [ 0] richards.HandlerTaskDataRecord.deviceIn
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 379999531 ns (0.92%), 38 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 369997288 ns (0.90%), 37 samples
  [ 0] richards.Packet.getDatum
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 359998055 ns (0.87%), 36 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 350004357 ns (0.85%), 35 samples
  [ 0] richards.Scheduler.holdSelf
  [ 1] richards.Scheduler$DeviceProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 340004352 ns (0.82%), 34 samples
  [ 0] richards.DeviceTaskDataRecord.setPending
  [ 1] richards.Scheduler$DeviceProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 310013679 ns (0.75%), 31 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 310001318 ns (0.75%), 31 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 280001164 ns (0.68%), 28 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 279995958 ns (0.68%), 28 samples
  [ 0] richards.HandlerTaskDataRecord.deviceInAdd
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 260022744 ns (0.63%), 26 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler$IdleProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 240002700 ns (0.58%), 24 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 239996811 ns (0.58%), 24 samples
  [ 0] richards.TaskState.isWaitingWithPacket
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 230011670 ns (0.56%), 23 samples
  [ 0] richards.IdleTaskDataRecord.setControl
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 230001040 ns (0.56%), 23 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 230000101 ns (0.56%), 23 samples
  [ 0] richards.TaskState.isTaskHoldingOrWaiting
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 220000957 ns (0.53%), 22 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.TaskControlBlock.addInputAndCheckPriority
  [ 3] richards.Scheduler.queuePacket
  [ 4] richards.Scheduler$HandlerProcessFunction.apply
  [ 5] richards.TaskControlBlock.runTask
  [ 6] richards.Scheduler.schedule
  [ 7] richards.Scheduler.start
  [ 8] Richards.benchmark
  [ 9] Benchmark.innerBenchmarkLoop
  [10] Run.measure
  [11] Run.doRuns
  [12] Run.runBenchmark
  [13] Harness.main

--- 210014357 ns (0.51%), 21 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] [unknown_Java]

--- 210002311 ns (0.51%), 21 samples
  [ 0] richards.IdleTaskDataRecord.setControl
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 209998004 ns (0.51%), 21 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 209994259 ns (0.51%), 21 samples
  [ 0] richards.RBObject.append
  [ 1] richards.HandlerTaskDataRecord.deviceInAdd
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 200006382 ns (0.48%), 20 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 200003650 ns (0.48%), 20 samples
  [ 0] richards.Scheduler$DeviceProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 200003467 ns (0.48%), 20 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 190010416 ns (0.46%), 19 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 190001652 ns (0.46%), 19 samples
  [ 0] richards.RBObject.append
  [ 1] richards.TaskControlBlock.addInputAndCheckPriority
  [ 2] richards.Scheduler.queuePacket
  [ 3] richards.Scheduler$HandlerProcessFunction.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 189994414 ns (0.46%), 19 samples
  [ 0] richards.Packet.getIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 189994300 ns (0.46%), 19 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 189991854 ns (0.46%), 19 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 179998214 ns (0.44%), 18 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 170004971 ns (0.41%), 17 samples
  [ 0] richards.IdleTaskDataRecord.setControl
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 169998431 ns (0.41%), 17 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 169995618 ns (0.41%), 17 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 169989556 ns (0.41%), 17 samples
  [ 0] richards.HandlerTaskDataRecord.deviceIn
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 160007437 ns (0.39%), 16 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 160006445 ns (0.39%), 16 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler$IdleProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 160000427 ns (0.39%), 16 samples
  [ 0] richards.TaskControlBlock.runTask
  [ 1] richards.Scheduler.schedule
  [ 2] richards.Scheduler.start
  [ 3] Richards.benchmark
  [ 4] Benchmark.innerBenchmarkLoop
  [ 5] Run.measure
  [ 6] Run.doRuns
  [ 7] Run.runBenchmark
  [ 8] Harness.main

--- 159992927 ns (0.39%), 16 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 140005632 ns (0.34%), 14 samples
  [ 0] richards.Packet.setIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 140003273 ns (0.34%), 14 samples
  [ 0] richards.IdleTaskDataRecord.setCount
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 140002794 ns (0.34%), 14 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.RBObject.append
  [ 2] richards.HandlerTaskDataRecord.workInAdd
  [ 3] richards.Scheduler$HandlerProcessFunction.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 140000966 ns (0.34%), 14 samples
  [ 0] richards.HandlerTaskDataRecord.workInAdd
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 130010422 ns (0.31%), 13 samples
  [ 0] richards.Packet.getLink
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 130009622 ns (0.31%), 13 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 130004926 ns (0.31%), 13 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

--- 129997736 ns (0.31%), 13 samples
  [ 0] richards.DeviceTaskDataRecord.setPending
  [ 1] richards.Scheduler$DeviceProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 129995659 ns (0.31%), 13 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 129995308 ns (0.31%), 13 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 129995250 ns (0.31%), 13 samples
  [ 0] richards.TaskState.isWaitingWithPacket
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 120012822 ns (0.29%), 12 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler$IdleProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 120008323 ns (0.29%), 12 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 120004884 ns (0.29%), 12 samples
  [ 0] richards.RBObject.append
  [ 1] richards.TaskControlBlock.addInputAndCheckPriority
  [ 2] richards.Scheduler.queuePacket
  [ 3] richards.Scheduler$HandlerProcessFunction.apply
  [ 4] richards.TaskControlBlock.runTask
  [ 5] richards.Scheduler.schedule
  [ 6] richards.Scheduler.start
  [ 7] Richards.benchmark
  [ 8] Benchmark.innerBenchmarkLoop
  [ 9] Run.measure
  [10] Run.doRuns
  [11] Run.runBenchmark
  [12] Harness.main

--- 120002536 ns (0.29%), 12 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 120002110 ns (0.29%), 12 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 119991819 ns (0.29%), 12 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] [unknown_Java]

--- 110004650 ns (0.27%), 11 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 110001556 ns (0.27%), 11 samples
  [ 0] richards.Packet.setDatum
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 109999993 ns (0.27%), 11 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$WorkerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 100013273 ns (0.24%), 10 samples
  [ 0] richards.DeviceTaskDataRecord.setPending
  [ 1] richards.Scheduler$DeviceProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 100012078 ns (0.24%), 10 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.release
  [ 2] richards.Scheduler$IdleProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 100001822 ns (0.24%), 10 samples
  [ 0] richards.TaskState.setTaskHolding
  [ 1] richards.Scheduler.holdSelf
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 100001648 ns (0.24%), 10 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 100000159 ns (0.24%), 10 samples
  [ 0] richards.Scheduler$IdleProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 99998412 ns (0.24%), 10 samples
  [ 0] richards.Scheduler$HandlerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 99998365 ns (0.24%), 10 samples
  [ 0] richards.TaskState.packetPending
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 99997478 ns (0.24%), 10 samples
  [ 0] richards.Packet.setLink
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 90006912 ns (0.22%), 9 samples
  [ 0] richards.Scheduler.findTask
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 90004271 ns (0.22%), 9 samples
  [ 0] richards.IdleTaskDataRecord.getControl
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 90002147 ns (0.22%), 9 samples
  [ 0] richards.Scheduler.queuePacket
  [ 1] richards.Scheduler$WorkerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 80008004 ns (0.19%), 8 samples
  [ 0] richards.TaskState.running
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 80003938 ns (0.19%), 8 samples
  [ 0] richards.HandlerTaskDataRecord.workIn
  [ 1] richards.Scheduler$HandlerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 80002636 ns (0.19%), 8 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 79997471 ns (0.19%), 8 samples
  [ 0] richards.Scheduler.release
  [ 1] richards.Scheduler$IdleProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 79992323 ns (0.19%), 8 samples
  [ 0] richards.Packet.setIdentity
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$DeviceProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 70005041 ns (0.17%), 7 samples
  [ 0] richards.Scheduler$WorkerProcessFunction.apply
  [ 1] richards.TaskControlBlock.runTask
  [ 2] richards.Scheduler.schedule
  [ 3] richards.Scheduler.start
  [ 4] Richards.benchmark
  [ 5] Benchmark.innerBenchmarkLoop
  [ 6] Run.measure
  [ 7] Run.doRuns
  [ 8] Run.runBenchmark
  [ 9] Harness.main

--- 69999712 ns (0.17%), 7 samples
  [ 0] richards.TaskControlBlock.addInputAndCheckPriority
  [ 1] richards.Scheduler.queuePacket
  [ 2] richards.Scheduler$HandlerProcessFunction.apply
  [ 3] richards.TaskControlBlock.runTask
  [ 4] richards.Scheduler.schedule
  [ 5] richards.Scheduler.start
  [ 6] Richards.benchmark
  [ 7] Benchmark.innerBenchmarkLoop
  [ 8] Run.measure
  [ 9] Run.doRuns
  [10] Run.runBenchmark
  [11] Harness.main

--- 69997097 ns (0.17%), 7 samples
  [ 0] richards.WorkerTaskDataRecord.getCount
  [ 1] richards.Scheduler$WorkerProcessFunction.apply
  [ 2] richards.TaskControlBlock.runTask
  [ 3] richards.Scheduler.schedule
  [ 4] richards.Scheduler.start
  [ 5] Richards.benchmark
  [ 6] Benchmark.innerBenchmarkLoop
  [ 7] Run.measure
  [ 8] Run.doRuns
  [ 9] Run.runBenchmark
  [10] Harness.main

--- 60004415 ns (0.15%), 6 samples
  [ 0] richards.Scheduler.schedule
  [ 1] richards.Scheduler.start
  [ 2] Richards.benchmark
  [ 3] Benchmark.innerBenchmarkLoop
  [ 4] Run.measure
  [ 5] Run.doRuns
  [ 6] Run.runBenchmark
  [ 7] Harness.main

          ns  percent  samples  top
  ----------  -------  -------  ---
  7850076040   19.01%      785  richards.Scheduler.schedule
  7060093298   17.10%      706  richards.TaskControlBlock.runTask
  4790041840   11.60%      479  richards.Scheduler$HandlerProcessFunction.apply
  3130077625    7.58%      313  richards.TaskState.isTaskHoldingOrWaiting
  2950099384    7.14%      295  richards.Scheduler$DeviceProcessFunction.apply
  1680002128    4.07%      168  richards.TaskControlBlock.addInputAndCheckPriority
  1320013102    3.20%      132  richards.Scheduler$IdleProcessFunction.apply
  1149982434    2.79%      115  richards.TaskState.isWaitingWithPacket
  1110042640    2.69%      111  richards.Scheduler.findTask
  1050023025    2.54%      105  richards.Scheduler$WorkerProcessFunction.apply
   849995303    2.06%       85  richards.TaskControlBlock.getIdentity
   769989934    1.86%       77  richards.Packet.setLink
   730015936    1.77%       73  richards.TaskControlBlock.getLink
   610018952    1.48%       61  richards.IdleTaskDataRecord.setControl
   609997612    1.48%       61  richards.RBObject.append
   579999818    1.40%       58  richards.HandlerTaskDataRecord.deviceIn
   570015361    1.38%       57  richards.DeviceTaskDataRecord.setPending
   520031011    1.26%       52  richards.TaskState.setTaskHolding
   480006554    1.16%       48  richards.Scheduler.queuePacket
   369997288    0.90%       37  richards.Packet.getDatum
   360021137    0.87%       36  /home/hb478/repos/graal-instrumentation/sdk/mxbuild/linux-amd64/GRAALVM_LIBGRAAL_JAVA21/graalvm-libgraal-openjdk-21.0.2+13.1/lib/libjvmcicompiler.so
   350004357    0.85%       35  richards.Scheduler.holdSelf
   279995958    0.68%       28  richards.HandlerTaskDataRecord.deviceInAdd
   259998041    0.63%       26  richards.Packet.setIdentity
   249992332    0.61%       25  richards.Packet.getIdentity
   169998447    0.41%       17  richards.Packet.setDatum
   160007856    0.39%       16  richards.Packet.getLink
   160001160    0.39%       16  richards.HandlerTaskDataRecord.workInAdd
   150001530    0.36%       15  richards.HandlerTaskDataRecord.workIn
   140003273    0.34%       14  richards.IdleTaskDataRecord.setCount
   109997462    0.27%       11  richards.Scheduler.release
    99998365    0.24%       10  richards.TaskState.packetPending
    90008108    0.22%        9  richards.TaskState.running
    90004271    0.22%        9  richards.IdleTaskDataRecord.getControl
    79996032    0.19%        8  richards.WorkerTaskDataRecord.setCount
    69997097    0.17%        7  richards.WorkerTaskDataRecord.getCount
    50006873    0.12%        5  richards.TaskState.setPacketPending
    40003382    0.10%        4  richards.WorkerTaskDataRecord.setDestination
    39996899    0.10%        4  richards.Packet.getData
    20006177    0.05%        2  do_user_addr_fault_[k]
    10016949    0.02%        1  Interpreter
    10015770    0.02%        1  get_page_from_freelist_[k]
    10006626    0.02%        1  jdk.internal.org.objectweb.asm.MethodWriter.visitFieldInsn
    10005772    0.02%        1  __alloc_pages_[k]
    10005370    0.02%        1  java.lang.invoke.InvokerBytecodeGenerator.assertStaticType
    10003699    0.02%        1  next_uptodate_page_[k]
    10003392    0.02%        1  jdk.internal.org.objectweb.asm.ByteVector.put11
    10003234    0.02%        1  __fget_light_[k]
    10002852    0.02%        1  free_pgtables_[k]
    10002733    0.02%        1  mas_update_gap.part.0_[k]
    10002171    0.02%        1  HandleMark::initialize
    10001771    0.02%        1  JNIHandleBlock::allocate_handle
    10001640    0.02%        1  java.io.PrintStream.write
     9998982    0.02%        1  zap_pte_range_[k]
